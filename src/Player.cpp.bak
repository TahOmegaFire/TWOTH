#include "Headers/Player.h"
#include <exception>

Player::Player()
{
    m_Texture.LoadTexture("Res/Img/Player/test.png", false);
    m_XVel = 0.0f;
    m_XAccel = 0.4f;
	m_YAccel = 20.0f;
    m_XFriction = 0.0f;
	collisionBox.m_W = m_Texture.m_Width;
	collisionBox.m_H = 64; //You'll have to eventually change this thing fam
	UtilFn::Print2Values(collisionBox.m_W, collisionBox.m_H);
	rightMovementPossible = leftMovementPossible = true;
}

Player::~Player()
{

}

bool Player::LoadEntity(const char* path)
{
    return false; //TO DO: This shouldn't just be a return false function mate
}

void Player::Update(const Uint8* keys, const Map& map)
{
    //Movement
    MoveX(keys, map);
	MoveY(keys, map);
}

void Player::MoveX(const Uint8* keys, const Map& map)
{
	bool collided = false;
	
	CollisionBox collider(collisionBox.m_X, collisionBox.m_Y, 0, 0);
	
	if(m_XVel > 0)
		collider.m_X += collisionBox.m_W;
	
	std::vector<Tile> colTiles(map.GetCollidingTiles(collider));
		
	for(size_t i = 0; i < colTiles.size(); i++)
	{
		if(colTiles[i].m_Type == Tile::TILE1)
		{
			collided = true;
			if(m_XVel > 0)
			{
				//collisionBox.m_X -= 1;
				rightMovementPossible = false;
			}
			else
			{
				//collisionBox.m_X += 1;
				leftMovementPossible = false;
			}
			m_XVel = 0;
		}
	}
	
	if(!collided)
		rightMovementPossible = leftMovementPossible = true;
	
	if(keys[SDL_SCANCODE_RIGHT])
	{
		if(rightMovementPossible)
		{
			if(m_XVel < 5)
				m_XVel += m_XAccel;
			leftMovementPossible = true;
		}
	}

	else if(keys[SDL_SCANCODE_LEFT])
	{
		if(leftMovementPossible)
		{
			if(m_XVel > -5)
				m_XVel -= m_XAccel;
			rightMovementPossible = true;
		}
	}

	else
	{
		if(m_XVel > 0)
		{
			if(m_XVel > 0.4f)
				m_XVel -= m_XAccel * 3 / 2;
			else
				m_XVel = 0;
		}

		else if(m_XVel < 0)
		{
			if(m_XVel < -0.4f)
				m_XVel += m_XAccel * 3 / 2;
			else
				m_XVel = 0;
		}
	}
	
	//std::cout << m_XVel << std::endl;

    collisionBox.m_X += m_XVel;
}

void Player::MoveY(const Uint8* keys, const Map& map)
{	
	bool collided = false;
	
	if(!isOnGround)
	{
		if(!keys[SDL_SCANCODE_Z])
		{
			if(m_YVel < 0)
				m_YVel -= GRAVITY;
		}
		
		m_YVel -= GRAVITY;
		
		CollisionBox collider(collisionBox.m_X + 1, collisionBox.m_Y, collisionBox.m_W, 0); //Top collision
	
		std::vector<Tile> colTiles(map.GetCollidingTiles(collider));
		
		for(size_t i = 0; i < colTiles.size(); i++)
		{
			if(colTiles[i].m_Type == Tile::TILE1)
			{
				collided = true;
				m_YVel = 0;	
				collisionBox.m_Y = colTiles[i].y * 64 + collisionBox.m_H;
			}
		}
		
		collider.m_X = collisionBox.m_X + 1; collider.m_Y = collisionBox.m_Y + collisionBox.m_H; collider.m_W = collisionBox.m_W; //Bottom (text) collision
		
		colTiles.clear();
		colTiles = map.GetCollidingTiles(collider);
		
		for(size_t i = 0; i < colTiles.size(); i++)
		{
			if(colTiles[i].m_Type == Tile::TILE1)
			{
				collided = true;
				m_YVel = 0;	
				isOnGround = true;
				collisionBox.m_Y = colTiles[i].y * 64 - collisionBox.m_H;
			}
		}
	}
	
	else
	{
		if(keys[SDL_SCANCODE_Z])
		{
			if(!jumped)
			{
				m_YVel -= m_YAccel;
				isOnGround = false;
				jumped = true;
			}
		}
		
		else
			jumped = false;
		
		CollisionBox collider(collisionBox.m_X, collisionBox.m_Y + collisionBox.m_H, collisionBox.m_W, 1); //Bottom collision
	
		std::vector<Tile> colTiles(map.GetCollidingTiles(collider));
		//std::vector<Tile&> colTiles(map.GetCollidingTilesF(collider));

		for(size_t i = 0; i < colTiles.size(); i++)
		{
			if(colTiles[i].m_Type == Tile::TILE1)
				collided = true;
			
			if(!collided)
				isOnGround = false;
		}
	}
	
	collisionBox.m_Y += m_YVel;
}

void Player::Render(Point2D camera_pos)
{
    m_Texture.Render(collisionBox.m_X - camera_pos.x, collisionBox.m_Y - camera_pos.y);
}
